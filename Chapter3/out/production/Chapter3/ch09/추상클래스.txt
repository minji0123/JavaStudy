[추상 클래스]
- 구현 코드 없이 메서드의 선언만 있는 추상 메서드를 포함한 클래스

- 메서드 선언(declaration) : 반환타입, 메서드이름, 매개변수
    - int add(int x, int y);  // 선언

- 메서드 정의(definition) : 메서드 구현(implementation)과 동일한 의미 구현부(body)를 가짐({})
    - int add(int x, int y);  // 선언
      int add(int x, int y){} // 구현부가 있음. 추상 메서드 아님

- abstract 예약어를 사용
- 추상 클래스는 new할 수 없음(인스턴스화 할 수 없음)

[추상 클래스 구현]
- abstract로 선언
    - 메서드에 구현 코드가 없으면 abstract로 선언
    - abstract로 선언된 메서드를 가진 클래스는 abstract로 선언

- 모든 메서드가 구현된 클래스라도 abstract로 선언할 수 있음
    -추상 클래스로 인스턴스화 할 수없음

- 추상 클래스의 추상 메서드는 하위 클래스가 상속하여 구현
- 추상 클래스 내의 추상 메서드 : 하위 클래스가 구현해야 하는 메서드
- 추상 클래스 내의 구현된 메서드 : 하위 클래스가 공통으로 사용하는 메서드 (필요에 따라 하위클래스에서 재정의)


[Computer 클래스]
- 상속을 위한 클래스
- turnOn과 turnOff는 구현할 수 있지만                  // 컴퓨터를 껐다 켰다 껐다 켰다
- 구현하지 못할 display, typing은 추상메소드로 놓는다.     // 컴퓨터 디스플레이, 타이핑은 너무 범위가 크다. (다른 이유도 있는데, 일단 여기서는)
    - 이 추상메소드들은 하위클래스에 그 책임을 위임한다.
    - 나는 구현하지 않을 테니, 상속받을 너희들이 알아서 구현해라!!
    - __프레임워크__
        - 프레임워크를 가져다가 쓴다. --> 어떤 클래스를 extends를 하면 --> 구현되어있는 메소드도 있지만, 안되어있는 부분도 있다.  --> 구현안되어있는부분은 내가 한다.

[DeskTop 클래스]
- 자식 클래스
- 추상 클래스를 구현한다.
- 메소드 오버라이딩도 가능

