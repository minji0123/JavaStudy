[예외처리를 하는 이유]
1. 프로그램에서의 오류
    - 컴파일 오류(compile error)
        - 프로그램 코드 작성 중 발생하는 문법적 오류
        - 최근에는 개발 환경(eclipse, intellij) 에서 대부분의 컴파일 오류가 detection된다.
    - 실행 오류 (runtime error)
        - 실행 중인 프로그램이 의도하지 않는 동작(bug), 프로그램이 중지
        - 실행 오류는 비정상 종료가 되는 경우, 시스템에 심각한 장애를 유발할 수 있다.


[예외처리의 중요성]
1. 프로그램의 비정상 종료를 피하여 시스템이 원활하게 돌아가게 함
2. 실행 오류가 발생한 경우, 오류 과정을 재현하는거는 힘들다.
    - 오류가 발생한 경우, log를 남기고, log분석을 통해 그 원인을 파악해서 bug를 수정하는게 중요

[오류와 예외 클래스]
1. 시스템 오류 error : 가상 머신에서 발생, 프로그래머가 처리할 수 없는 오류
    - 동적 메모리가 없는 경우, 스택 메모리 오버플로우...
2. 예외 exception : 프로그램에서 제어 할 수 있는 오류
    - 읽어들이려는 파일이 존재하지 않거나, 네트워크,db연결이 안되는 경우...
    - 문법적인 예외 처리 필요(자바는 안전성이 중요한 언어이기 때문)

[예외 클래스들_많이 사용하는 애들]
1. Arithmetic Exception : 정수를 0으로 나눈 경우
2. NullPointerException : 초기화되지 않은 Object 사용한 경우
3. ArrayIndexOutOfBoundsException : 배열의 크기를 넘어선 위치를 참조하는 경우
4. ClassNotFoundException : 클래스가 로드되지 않은 경우
5. InterruptedException :